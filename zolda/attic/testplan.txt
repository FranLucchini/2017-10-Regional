# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - validators/st1.cpp]
  # Use sample data as test
  1 ; copy statement/sample-1.in
  1 ; copy statement/sample-2.in

  # Random tests
  # Rand params: n    | k    | minX | maxX | minY | maxY 
  3 ; gen_random.py 100    1      1      1000   1      1000
  3 ; gen_random.py 100    11     1      1000   1      1000
  3 ; gen_random.py 100    21     1      1000   1      1000
  3 ; gen_random.py 100    31     1      1000   1      1000
  3 ; gen_random.py 100    41     1      1000   1      1000
  3 ; gen_random.py 100    51     750    1000   750    1000
  3 ; gen_random.py 100    61     750    1000   750    1000
  3 ; gen_random.py 100    71     750    1000   750    1000
  3 ; gen_random.py 100    81     750    1000   750    1000
  3 ; gen_random.py 100    91     750    1000   750    1000
  3 ; gen_random.py 100    100    750    1000   750    1000
  3 ; gen_random.py 100    100    750    1000   750    1000
  3 ; gen_random.py 100    100    1      1000   1      1000
  3 ; gen_random.py 100    100    1      1000   1      1000

[Subtask 2 - validators/st2.cpp]
  # Random tests
  # Rand params: n     | k     | minX | maxX | minY | maxY 
  3 ; gen_random.py 10000   9001    1      10000  1      10000
  3 ; gen_random.py 10000   9011    1      10000  1      10000
  3 ; gen_random.py 10000   9021    1      10000  1      10000
  3 ; gen_random.py 10000   9031    1      10000  1      10000
  3 ; gen_random.py 10000   9041    1      10000  1      10000
  3 ; gen_random.py 10000   9051    7500   10000  7500   10000
  3 ; gen_random.py 10000   9061    7500   10000  7500   10000
  3 ; gen_random.py 10000   9071    7500   10000  7500   10000
  3 ; gen_random.py 10000   9081    7500   10000  7500   10000
  3 ; gen_random.py 10000   9091    7500   10000  7500   10000
  3 ; gen_random.py 10000   9500    7500   10000  7500   10000
  3 ; gen_random.py 10000   9500    7500   10000  7500   10000
  3 ; gen_random.py 10000   10000   1      10000  1      10000
  3 ; gen_random.py 10000   10000   1      10000  1      10000

[Subtask 3 - validators/st3.cpp]
  # Random tests
  # Rand params: n     | k     | minX      | maxX      | minY | maxY 
  3 ; gen_random.py 10000   9001    1           1000000000  0      0
  3 ; gen_random.py 10000   9011    1           1000000000  0      0
  3 ; gen_random.py 10000   9021    1           1000000000  0      0
  3 ; gen_random.py 10000   9031    1           1000000000  0      0
  3 ; gen_random.py 10000   9041    1           1000000000  0      0
  3 ; gen_random.py 10000   9051    750000000   1000000000  0      0
  3 ; gen_random.py 10000   9061    750000000   1000000000  0      0
  3 ; gen_random.py 10000   9071    750000000   1000000000  0      0
  3 ; gen_random.py 10000   9081    750000000   1000000000  0      0
  3 ; gen_random.py 10000   9091    750000000   1000000000  0      0
  3 ; gen_random.py 10000   9500    750000000   1000000000  0      0
  3 ; gen_random.py 10000   9500    750000000   1000000000  0      0
  3 ; gen_random.py 10000   10000   1           1000000000  0      0
  3 ; gen_random.py 10000   10000   1           1000000000  0      0

[Subtask 4 - validators/st4.cpp]
  # Random tests
  # Rand params: n     | k     | minX      | maxX      | minY      | maxY 
  3 ; gen_random.py 10000   9001    1           1000000000  1           1000000000
  3 ; gen_random.py 10000   9011    1           1000000000  1           1000000000
  3 ; gen_random.py 10000   9021    1           1000000000  1           1000000000
  3 ; gen_random.py 10000   9031    1           1000000000  1           1000000000
  3 ; gen_random.py 10000   9041    1           1000000000  1           1000000000
  3 ; gen_random.py 10000   9051    750000000   1000000000  750000000   1000000000
  3 ; gen_random.py 10000   9061    750000000   1000000000  750000000   1000000000
  3 ; gen_random.py 10000   9071    750000000   1000000000  750000000   1000000000
  3 ; gen_random.py 10000   9081    750000000   1000000000  750000000   1000000000
  3 ; gen_random.py 10000   9091    750000000   1000000000  750000000   1000000000
  3 ; gen_random.py 10000   9500    750000000   1000000000  750000000   1000000000
  3 ; gen_random.py 10000   9500    750000000   1000000000  750000000   1000000000
  3 ; gen_random.py 10000   10000   1           1000000000  1           1000000000
  3 ; gen_random.py 10000   10000   1           1000000000  1           1000000000


